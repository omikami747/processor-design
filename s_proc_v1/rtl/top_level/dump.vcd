$date
	Sun Dec  4 12:24:44 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module toplevel_tb $end
$var wire 1 ! tstrw $end
$var wire 8 " tstdout [7:0] $end
$var wire 8 # tstadrs [7:0] $end
$var reg 1 $ tstclk $end
$var reg 1 % tstclr $end
$var reg 16 & tstdin [15:0] $end
$scope module dut $end
$var wire 8 ' adrs_in [7:0] $end
$var wire 1 $ clk $end
$var wire 1 % clr $end
$var wire 16 ( din [15:0] $end
$var wire 1 ) zero $end
$var wire 1 ! rw $end
$var wire 8 * pc_out [7:0] $end
$var wire 1 + muxc $end
$var wire 1 , muxb $end
$var wire 1 - muxa $end
$var wire 16 . ir_out [15:0] $end
$var wire 1 / en_pc $end
$var wire 1 0 en_ir $end
$var wire 1 1 en_da $end
$var wire 8 2 dout [7:0] $end
$var wire 1 3 carry $end
$var wire 8 4 b [7:0] $end
$var wire 8 5 alu_result [7:0] $end
$var wire 5 6 alu [4:0] $end
$var wire 8 7 adrs [7:0] $end
$var wire 8 8 a [7:0] $end
$scope module dut_acc $end
$var wire 1 $ clk $end
$var wire 1 % clr $end
$var wire 1 1 en_da $end
$var wire 8 9 acc_in [7:0] $end
$var reg 8 : acc_out [7:0] $end
$upscope $end
$scope module dut_alu $end
$var wire 8 ; dout [7:0] $end
$var wire 1 3 carry $end
$var wire 8 < b [7:0] $end
$var wire 5 = alu [4:0] $end
$var wire 8 > a [7:0] $end
$var reg 9 ? temp_dout [8:0] $end
$var reg 1 ) zero $end
$upscope $end
$scope module dut_decoder $end
$var wire 1 3 carry $end
$var wire 1 $ clk $end
$var wire 1 % clr $end
$var wire 8 @ ir [7:0] $end
$var wire 1 ) zero $end
$var wire 1 A i $end
$var wire 1 B f $end
$var wire 1 C e $end
$var wire 1 D d $end
$var reg 1 E add $end
$var reg 5 F alu [4:0] $end
$var reg 1 G bitand $end
$var reg 1 H carry_reg $end
$var reg 1 I decexe $end
$var reg 1 1 en_da $end
$var reg 1 0 en_ir $end
$var reg 1 / en_pc $end
$var reg 1 J inp $end
$var reg 1 K jump $end
$var reg 1 L jump_not_taken $end
$var reg 1 M jump_taken $end
$var reg 1 N jumpc $end
$var reg 1 O jumpnc $end
$var reg 1 P jumpnz $end
$var reg 1 Q jumpz $end
$var reg 1 R load $end
$var reg 1 - muxa $end
$var reg 1 , muxb $end
$var reg 1 + muxc $end
$var reg 1 S outp $end
$var reg 1 ! rw $end
$var reg 4 T state [3:0] $end
$var reg 1 U sub $end
$var reg 1 V zero_reg $end
$upscope $end
$scope module dut_ir $end
$var wire 1 $ clk $end
$var wire 1 % clr $end
$var wire 16 W d_in [15:0] $end
$var wire 1 0 en_ir $end
$var reg 16 X d_out [15:0] $end
$upscope $end
$scope module dut_muxa $end
$var wire 8 Y acc [7:0] $end
$var wire 1 - muxa $end
$var wire 8 Z pc [7:0] $end
$var reg 8 [ a [7:0] $end
$upscope $end
$scope module dut_muxb $end
$var wire 8 \ ir [7:0] $end
$var wire 8 ] mem [7:0] $end
$var wire 1 , muxb $end
$var reg 8 ^ b [7:0] $end
$upscope $end
$scope module dut_muxc $end
$var wire 8 _ ir [7:0] $end
$var wire 1 + muxc $end
$var wire 8 ` pc [7:0] $end
$var reg 8 a c [7:0] $end
$upscope $end
$scope module dut_pc $end
$var wire 8 b adrs_in [7:0] $end
$var wire 1 $ clk $end
$var wire 1 % clr $end
$var wire 1 / en_pc $end
$var reg 8 c adrs_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 c
bz b
b0 a
b0 `
b0 _
bx ^
bx ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
bx W
0V
0U
b0 T
0S
0R
0Q
0P
0O
0N
0M
1L
0K
0J
0I
0H
0G
b0 F
0E
0D
0C
0B
0A
b0 @
bx ?
b0 >
b0 =
bx <
bx ;
b0 :
bx 9
b0 8
b0 7
b0 6
bx 5
bx 4
x3
b0 2
01
00
0/
b0 .
0-
0,
0+
b0 *
0)
bx (
bz '
bx &
0%
0$
b0 #
b0 "
0!
$end
#5
1$
#10
0$
#15
1$
#20
0$
#25
1$
#30
0$
#35
b10000000 5
b10000000 9
b10000000 ;
03
b10000000 ?
b10000000 4
b10000000 <
b10000000 ^
b10000000 ]
b1010000010000000 &
b1010000010000000 (
b1010000010000000 W
1%
1$
#40
0$
#45
10
1B
b1000 T
1$
#50
0$
#55
b10000000 #
b10000000 7
b10000000 a
1+
b11 6
b11 =
b11 F
1J
00
1I
b10000000 _
b10000000 \
b10100000 @
0B
1D
b1010000010000000 .
b1010000010000000 X
b100 T
1$
#60
0$
#65
11
0D
1C
b10 T
1$
#70
0$
#75
b1 5
b1 9
b1 ;
b0 #
b0 7
b0 a
b1 ?
0+
0J
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
b0 8
b0 >
b0 [
0C
1A
b1 T
b10000000 "
b10000000 2
b10000000 :
b10000000 Y
1$
#80
0$
#85
b10001111 5
b10001111 9
b10001111 ;
03
b10001111 ?
10
0/
0-
b0 6
b0 =
b0 F
b1111 4
b1111 <
b1111 ^
b10000000 8
b10000000 >
b10000000 [
bz #
bz 7
bz a
1B
0A
b1111 ]
b1000 T
bz *
bz Z
bz `
bz c
b100000000001111 &
b100000000001111 (
b100000000001111 W
1$
#90
0$
#95
1,
1E
00
1I
b1111 _
b1111 \
b1000000 @
0B
1D
b100000000001111 .
b100000000001111 X
b100 T
1$
#100
0$
#105
11
0D
1C
b10 T
1$
#110
0$
#115
x3
0,
bx 5
bx 9
bx ;
0E
bx ?
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
bz 8
bz >
bz [
0C
1A
b1 T
b10001111 "
b10001111 2
b10001111 :
b10001111 Y
1$
#120
0$
#125
b10011110 5
b10011110 9
b10011110 ;
03
b10011110 ?
b10001111 8
b10001111 >
b10001111 [
10
0/
0-
b0 6
b0 =
b0 F
1B
0A
b1000 T
1$
#130
0$
#135
1,
1E
00
1I
0B
1D
b100 T
1$
#140
0$
#145
11
0D
1C
b10 T
1$
#150
0$
#155
x3
0,
bx 5
bx 9
bx ;
0E
bx ?
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
bz 8
bz >
bz [
0C
1A
b1 T
b10011110 "
b10011110 2
b10011110 :
b10011110 Y
1$
#160
0$
#165
b10101101 5
b10101101 9
b10101101 ;
03
b10101101 ?
b10011110 8
b10011110 >
b10011110 [
10
0/
0-
b0 6
b0 =
b0 F
1B
0A
b1000 T
1$
#170
0$
#175
1,
1E
00
1I
0B
1D
b100 T
1$
#180
0$
#185
11
0D
1C
b10 T
1$
#190
0$
#195
x3
0,
bx 5
bx 9
bx ;
0E
bx ?
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
bz 8
bz >
bz [
0C
1A
b1 T
b10101101 "
b10101101 2
b10101101 :
b10101101 Y
1$
#200
0$
#205
b10111100 5
b10111100 9
b10111100 ;
03
b10111100 ?
b10101101 8
b10101101 >
b10101101 [
10
0/
0-
b0 6
b0 =
b0 F
1B
0A
b1000 T
1$
#210
0$
#215
1,
1E
00
1I
0B
1D
b100 T
1$
#220
0$
#225
11
0D
1C
b10 T
1$
#230
0$
#235
x3
0,
bx 5
bx 9
bx ;
0E
bx ?
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
bz 8
bz >
bz [
0C
1A
b1 T
b10111100 "
b10111100 2
b10111100 :
b10111100 Y
1$
#240
0$
#245
b11001011 5
b11001011 9
b11001011 ;
03
b11001011 ?
b10111100 8
b10111100 >
b10111100 [
10
0/
0-
b0 6
b0 =
b0 F
1B
0A
b1000 T
1$
#250
0$
#255
1,
1E
00
1I
0B
1D
b100 T
1$
#260
0$
#265
11
0D
1C
b10 T
1$
#270
0$
#275
x3
0,
bx 5
bx 9
bx ;
0E
bx ?
01
0I
1/
1-
b10100 6
b10100 =
b10100 F
bz 8
bz >
bz [
0C
1A
b1 T
b11001011 "
b11001011 2
b11001011 :
b11001011 Y
1$
#280
0$
#285
b11011010 5
b11011010 9
b11011010 ;
03
b11011010 ?
b11001011 8
b11001011 >
b11001011 [
10
0/
0-
b0 6
b0 =
b0 F
1B
0A
b1000 T
1$
